# //  ModelSim SE 6.6d Nov  1 2010 Linux 4.4.0-97-generic
# //
# //  Copyright 1991-2010 Mentor Graphics Corporation
# //              All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND 
# //  PROPRIETARY INFORMATION WHICH IS THE PROPERTY
# //  OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS
# //  AND IS SUBJECT TO LICENSE TERMS.
# //
# Loading project bpti
# Compile of 21_and.vhd was successful.
# Compile of 21_not.vhd was successful.
# Compile of 21_or.vhd was successful.
# Compile of 22_nand_behav.vhd was successful.
# Compile of 22_nand_struct.vhd was successful.
# Compile of 22_nor_behav.vhd was successful.
# Compile of 22_nor_struct.vhd was successful.
# Compile of 23_impuls.vhd was successful.
# Compile of 24_counter.vhd was successful.
# Compile of 322_nand_testbench.vhd was successful.
# 10 compiles, 0 failed with no errors. 
vsim work.testbench_nand(nand_testbench)
# vsim work.testbench_nand(nand_testbench) 
# ** Note: (vsim-3812) Design is being optimized...
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/22_nor_struct.vhd(27): (vopt-1270) Bad default binding for component instance "t1 : and_or".
#  (Component port "c_out" is not on the entity.)
# ** Warning: [1] /home/capplab10/Schreibtisch/bpti/sheet1/task2/22_nor_struct.vhd(27): (vopt-3473) Component instance "t1 : and_or" is not bound.
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/22_nor_struct.vhd(28): (vopt-1270) Bad default binding for component instance "t2 : not_ent".
#  (Component port "bout" is not on the entity.)
# ** Warning: [1] /home/capplab10/Schreibtisch/bpti/sheet1/task2/22_nor_struct.vhd(28): (vopt-3473) Component instance "t2 : not_ent" is not bound.
# Optimization failed
# Error loading design
# Compile of 21_and.vhd was successful.
# Compile of 21_not.vhd was successful.
# Compile of 21_or.vhd was successful.
# Compile of 22_nand_behav.vhd was successful.
# Compile of 22_nand_struct.vhd failed with 1 errors.
# Compile of 22_nor_behav.vhd was successful.
# Compile of 22_nor_struct.vhd was successful.
# Compile of 23_impuls.vhd was successful.
# Compile of 24_counter.vhd was successful.
# Compile of 322_nand_testbench.vhd was successful.
# 10 compiles, 1 failed with 1 error. 
# Compile of 21_and.vhd was successful.
# Compile of 21_not.vhd was successful.
# Compile of 21_or.vhd was successful.
# Compile of 22_nand_behav.vhd was successful.
# Compile of 22_nand_struct.vhd was successful.
# Compile of 22_nor_behav.vhd was successful.
# Compile of 22_nor_struct.vhd was successful.
# Compile of 23_impuls.vhd was successful.
# Compile of 24_counter.vhd was successful.
# Compile of 322_nand_testbench.vhd was successful.
# 10 compiles, 0 failed with no errors. 
vsim work.testbench_nand(nand_testbench)
# vsim work.testbench_nand(nand_testbench) 
# ** Note: (vsim-3812) Design is being optimized...
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/22_nor_struct.vhd(27): (vopt-1270) Bad default binding for component instance "t1 : and_or".
#  (Component port "c_out" is not on the entity.)
# ** Warning: [1] /home/capplab10/Schreibtisch/bpti/sheet1/task2/22_nor_struct.vhd(27): (vopt-3473) Component instance "t1 : and_or" is not bound.
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/22_nor_struct.vhd(28): (vopt-1270) Bad default binding for component instance "t2 : not_ent".
#  (Component port "bout" is not on the entity.)
# ** Warning: [1] /home/capplab10/Schreibtisch/bpti/sheet1/task2/22_nor_struct.vhd(28): (vopt-3473) Component instance "t2 : not_ent" is not bound.
# Optimization failed
# Error loading design
# Compile of 21_and.vhd was successful.
# Compile of 21_not.vhd was successful.
# Compile of 21_or.vhd was successful.
# Compile of 22_nand_behav.vhd was successful.
# Compile of 22_nand_struct.vhd was successful.
# Compile of 22_nor_behav.vhd was successful.
# Compile of 22_nor_struct.vhd was successful.
# Compile of 23_impuls.vhd was successful.
# Compile of 24_counter.vhd was successful.
# Compile of 322_nand_testbench.vhd was successful.
# 10 compiles, 0 failed with no errors. 
vsim work.testbench_nand(nand_testbench)
# vsim work.testbench_nand(nand_testbench) 
# ** Note: (vsim-3812) Design is being optimized...
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/322_nand_testbench.vhd(17): (vopt-1270) Bad default binding for component instance "nand_1 : nand_ent".
#  (Component port "c" is not on the entity.)
# ** Warning: [1] /home/capplab10/Schreibtisch/bpti/sheet1/task2/322_nand_testbench.vhd(17): (vopt-3473) Component instance "nand_1 : nand_ent" is not bound.
# Optimization failed
# Error loading design
# Compile of 21_and.vhd was successful.
# Compile of 21_not.vhd was successful.
# Compile of 21_or.vhd was successful.
# Compile of 22_nand_behav.vhd was successful.
# Compile of 22_nand_struct.vhd was successful.
# Compile of 22_nor_behav.vhd was successful.
# Compile of 22_nor_struct.vhd was successful.
# Compile of 23_impuls.vhd was successful.
# Compile of 24_counter.vhd was successful.
# Compile of 322_nand_testbench.vhd was successful.
# 10 compiles, 0 failed with no errors. 
vsim work.testbench_nand(nand_testbench)
# vsim work.testbench_nand(nand_testbench) 
# ** Note: (vsim-3812) Design is being optimized...
# ** Warning: (vopt-13) Recompile work.and_ent(behaviour_and) because work.and_ent has changed.
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd(11): (vopt-1136) Unknown identifier "a".
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd(11): Expression is not a signal.
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd(11): (vopt-1136) Unknown identifier "b".
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd(11): Expression is not a signal.
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd(13): (vopt-1136) Unknown identifier "a".
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd(13): (vopt-1136) Unknown identifier "b".
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd(13): Bad expression in left operand of infix expression "and".
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd(13): Bad expression in right operand of infix expression "and".
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd(13): Type error resolving infix expression "and" as type std.standard.boolean.
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd(14): Illegal target for signal assignment.
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd(14): (vopt-1136) Unknown identifier "c".
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd(16): Illegal target for signal assignment.
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd(16): (vopt-1136) Unknown identifier "c".
# ** Warning: (vopt-13) Recompile work.not_ent(behaviour_not) because work.not_ent has changed.
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_not.vhd(8): Vopt Compiler exiting
# Error loading design
# Compile of 21_and.vhd failed with 1 errors.
# Compile of 21_not.vhd was successful.
# Compile of 21_or.vhd was successful.
# Compile of 22_nand_behav.vhd was successful.
# Compile of 22_nand_struct.vhd was successful.
# Compile of 22_nor_behav.vhd was successful.
# Compile of 22_nor_struct.vhd was successful.
# Compile of 23_impuls.vhd was successful.
# Compile of 24_counter.vhd was successful.
# Compile of 322_nand_testbench.vhd was successful.
# 10 compiles, 1 failed with 1 error. 
# Compile of 21_and.vhd failed with 1 errors.
# Compile of 21_not.vhd was successful.
# Compile of 21_or.vhd was successful.
# Compile of 22_nand_behav.vhd was successful.
# Compile of 22_nand_struct.vhd was successful.
# Compile of 22_nor_behav.vhd was successful.
# Compile of 22_nor_struct.vhd was successful.
# Compile of 23_impuls.vhd was successful.
# Compile of 24_counter.vhd was successful.
# Compile of 322_nand_testbench.vhd was successful.
# 10 compiles, 1 failed with 1 error. 
# Compile of 21_and.vhd was successful.
# Compile of 21_not.vhd was successful.
# Compile of 21_or.vhd was successful.
# Compile of 22_nand_behav.vhd was successful.
# Compile of 22_nand_struct.vhd was successful.
# Compile of 22_nor_behav.vhd was successful.
# Compile of 22_nor_struct.vhd was successful.
# Compile of 23_impuls.vhd was successful.
# Compile of 24_counter.vhd was successful.
# Compile of 322_nand_testbench.vhd was successful.
# 10 compiles, 0 failed with no errors. 
vsim work.testbench_nand(nand_testbench)
# vsim work.testbench_nand(nand_testbench) 
# ** Note: (vsim-3812) Design is being optimized...
# ** Warning: (vopt-13) Recompile work.not_ent(behaviour_not) because work.not_ent has changed.
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_not.vhd(10): (vopt-1136) Unknown identifier "a".
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_not.vhd(10): Expression is not a signal.
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_not.vhd(12): Illegal target for signal assignment.
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_not.vhd(12): (vopt-1136) Unknown identifier "a".
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_not.vhd(12): (vopt-1136) Unknown identifier "b".
# Optimization failed
# Error loading design
# Compile of 21_and.vhd was successful.
# Compile of 21_not.vhd was successful.
# Compile of 21_or.vhd was successful.
# Compile of 22_nand_behav.vhd was successful.
# Compile of 22_nand_struct.vhd was successful.
# Compile of 22_nor_behav.vhd was successful.
# Compile of 22_nor_struct.vhd was successful.
# Compile of 23_impuls.vhd was successful.
# Compile of 24_counter.vhd was successful.
# Compile of 322_nand_testbench.vhd was successful.
# 10 compiles, 0 failed with no errors. 
vsim work.testbench_nand(nand_testbench)
# vsim work.testbench_nand(nand_testbench) 
# ** Note: (vsim-3812) Design is being optimized...
# Loading std.standard
# Loading work.testbench_nand(nand_testbench)#1
run 400 ns
# ** Error: Falscher Wert! 0 statt 1
#    Time: 300 ns  Iteration: 0  Instance: /testbench_nand
# Compile of 21_and.vhd was successful.
restart
run 400 ns
# ** Error: Falscher Wert! 0 statt 1
#    Time: 300 ns  Iteration: 0  Instance: /testbench_nand
# Compile of 21_and.vhd was successful.
# Compile of 21_not.vhd was successful.
# Compile of 21_or.vhd was successful.
# Compile of 22_nand_behav.vhd was successful.
# Compile of 22_nand_struct.vhd was successful.
# Compile of 22_nor_behav.vhd was successful.
# Compile of 22_nor_struct.vhd was successful.
# Compile of 23_impuls.vhd was successful.
# Compile of 24_counter.vhd was successful.
# Compile of 322_nand_testbench.vhd was successful.
# 10 compiles, 0 failed with no errors. 
vsim work.testbench_nand(nand_testbench)
# vsim work.testbench_nand(nand_testbench) 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# Loading std.standard
# Loading work.testbench_nand(nand_testbench)#1
run 400 ns
# ** Error: Falscher Wert! 0 statt 1; 01
#    Time: 300 ns  Iteration: 0  Instance: /testbench_nand
# Compile of 21_and.vhd was successful.
# Compile of 21_not.vhd was successful.
# Compile of 21_or.vhd was successful.
# Compile of 22_nand_behav.vhd was successful.
# Compile of 22_nand_struct.vhd was successful.
# Compile of 22_nor_behav.vhd was successful.
# Compile of 22_nor_struct.vhd was successful.
# Compile of 23_impuls.vhd was successful.
# Compile of 24_counter.vhd was successful.
# Compile of 322_nand_testbench.vhd was successful.
# 10 compiles, 0 failed with no errors. 
vsim work.testbench_nand(nand_testbench)
# vsim work.testbench_nand(nand_testbench) 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# Loading std.standard
# Loading work.testbench_nand(nand_testbench)#1
run 500 ns
run 500 ns
# Error opening /home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd
# Path name '/home/capplab10/Schreibtisch/bpti/sheet1/task2/21_and.vhd' doesn't exist.
quit sim
# unknown switch: sim
quit -sim
# reading /Software/ModelSim/ModelSim_6.6d/modeltech/modelsim.ini
# Loading project bpti
# reading /Software/ModelSim/ModelSim_6.6d/modeltech/modelsim.ini
# Loading project bpti
# Compile of 21_and.vhd was successful.
# Compile of 21_not.vhd was successful.
# Compile of 21_or.vhd was successful.
# Compile of 22_nand_behav.vhd was successful.
# Compile of 22_nand_struct.vhd was successful.
# Compile of 22_nor_behav.vhd was successful.
# Compile of 22_nor_struct.vhd was successful.
# Compile of 23_impuls.vhd was successful.
# Compile of 24_counter.vhd was successful.
# Compile of 322_nand_testbench.vhd was successful.
# 10 compiles, 0 failed with no errors. 
project open /home/capplab10/Schreibtisch/bpti/bpti
compile 21_and.vhd
# wrong # args: should be "compile w cmd args"
vcom 21_and.vhd
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# ** Error: (vcom-7) Failed to open design unit file "21_and.vhd" in read mode.
# No such file or directory. (errno = ENOENT)
# /Software/ModelSim/ModelSim_6.6d/modeltech/linux/vcom failed.
vcom work.21_and.vhd
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# ** Error: (vcom-7) Failed to open design unit file "work.21_and.vhd" in read mode.
# No such file or directory. (errno = ENOENT)
# /Software/ModelSim/ModelSim_6.6d/modeltech/linux/vcom failed.
vcom work
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# -- Loading package standard
# ** Error: work(1): near "EOF": syntax error
# /Software/ModelSim/ModelSim_6.6d/modeltech/linux/vcom failed.
vcom -help
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# Usage: vcom [options] files
# Options:
#   -help              Print this message
#   -time              Print the compilation wall clock time
#   -version           Print the version of the compiler
#   -32                Run in 32-bit mode
#   -64                Run in 64-bit mode
#   -work <path>       Specify library WORK
#   -error <msgNumber>[,<msgNumber>...]
#                      Report the listed messages as errors
#   -warning <msgNumber>[,<msgNumber>...]
#                      Report the listed messages as warnings
#   -note <msgNumber>[,<msgNumber>...]
#                      Report the listed message as notes
#   -suppress <msgNumber>[,<msgNumber>...]
#                      Suppress the listed messages
#   -87                Enable support for VHDL 1076-1987 only
#   -93                Enable support for VHDL 1076-1993
#   -ams               Enable AMS wreal extensions
#   -2002              Enable support for VHDL 1076-2002
#   -check_synthesis   Check for compliance to some synthesis rules
#   +acc[=<spec>][{+<entity>[(<architecture>)]}]
#                      Enable access to certain objects which might otherwise be
#                      optimized away.
#                      Objects are specified by a combination of design unit name
#                      and object-kind.  The +<entity>[(<architecture>)] and <spec>
#                      modifiers together specify a set of objects in the given
#                      design units.
#                      These modifiers help maximize simulation performance while
#                      retaining access to objects of interest.
#                      The effect of this option is limited only to those design units
#                      being compiled in the current vcom session.
# 
#                      By default, this option has an effect on all design units
#                      being compiled.
#                      +<entity>[(<architecture>)] can be used to target the extent
#                      of this option to only a specified design unit.
# 
#                      By default, +acc has effect on all kinds of design objects.
#                      <spec> is used to target more precisely certain kinds of objects.
#                      <spec> consists of one or more of the following letter codes:
#                         f (finite state machine recognition and debugging)
#                         v (variables, constants, and aliases)
#                      When no valid <spec> characters are specified, the entire set
#                      is enabled.
#   -bindAtCompile     Perform default binding at compile time
#   -bindAtLoad        Perform default binding when the design is loaded
#   -amsstd            Add VHDL-AMS declarations to package STANDARD
#   -noamsstd          Do not add VHDL-AMS declarations to package STANDARD
#   -nocoversub        Ignore VHDL subprograms for code coverage
#   -coversub          Include VHDL subprograms for code coverage
#   -coverrespecthandl  Inform code coverage optimizations to look for H and L signal values
#   -nocoverrespecthandl  Inform code coverage optimizations to ignore H and L signal values
#   +cover[=<spec>]
#                      <spec> is used to enable code coverage metrics for certain
#                      kinds of constructs.
#                      <spec> consists of one or more of the following letter codes:
#                         s (statement)
#                         b (branch)
#                         c (condition)
#                         e (expression)
#                         f (finite state machine)
#                         t (toggle)
#                         x (extended toggle)
#                      If no <spec> characters are given, sbceft is the default.
#   -coveropt <i>      Specify a digit for code coverage optimization level: 1 through 4.
#   -coverexcludedefault Automatically exclude case default clauses.
#   -nocoverfec        Disable Focused Expression Coverage analysis for conditions and expressions.
#   -nocoverudp        Disable UDP Coverage analysis for conditions and expressions.
#   -nocovershort      Disable short circuiting of expressions/condition when coverage is enabled.
#   -nocoverexcludedefault Don't automatically exclude case default clauses.
#   -constimmedassert  Show constant immediate assertions in GUI/UCDB/reports etc.
#   -togglecountlimit n Quit collecting toggle info after count n is reached.
#   -togglewidthlimit n Don't collect toggle data on reg's or arrays wider than n.
#   -extendedtogglemode [1|2|3]
#                      Change the level of support for extended toggles.
#                      The levels of support are:
#                      1 - 0L->1H & 1H->0L & any one 'Z' transition (to/from 'Z')
#                      2 - 0L->1H & 1H->0L & one transition to 'Z' & one transition from 'Z'
#                      3 - 0L->1H & 1H->0L & all 'Z' transitions
#   -maxudprows n      Max number of rows allowed in UDP tables for code coverage.
#   -maxfecrows n      Max number of input patterns allowed in FEC table for code coverage.
#   -coverreportcancelled Report coverage items that have been optimized away.
#   -debugVA           Print VITAL cell optimization information
#   -defercheck        Defer all compile-time range checking on constant index and
#                      slice expressions until run time
#   -deferSubpgmCheck  Defer compile-time range checking on constant index and
#                      slice expressions in subprograms until run time
#   -explicit          Resolve resolution conflicts in favor of explicit functions
#   -f <path>          Specify a file containing more command line arguments
#   -force_refresh     Force a refresh of the library image from .dat file(s)
#                      even if there are errors
#   -nofsmresettrans   Disable recognition of implicit asynchronous reset transitions for FSMs
#   -fsmresettrans     Enable recognition of implicit asynchronous reset transitions for FSMs
#   -nofsmsingle       Disable recognition FSMs having single bit current state variable
#   -fsmsingle         Enable recognition FSMs having single bit current state variable
#   -fsmimplicittrans  Enable recognition of implicit transitions in FSMs
#   -nofsmimplicittrans Disable recognition of implicit transitions in FSMs
#   -fsmmultitrans     Enable recognition of Multi-state transitions in FSMs
#   -fsmverbose [b|t|w]
#                      Provides information about FSMs recognized, including state reachability analysis.
#                      There are three detail levels that can be set with this option.
#                         b (displays only basic information)
#                         t (displays a transition table in addition to the basic information)
#                         w (displays any warning messages in addition to the basic information)
#                      If no character is specified, btw is the default.
#   -gen_xml <entity> <output>
#                      Output (into a file) the interface definition of the
#                      specified design unit in XML format
#   -ignoredefaultbinding
#                      Do not generate a default binding during compilation
#   -ignorevitalerrors Ignore VITAL compliance errors
#   -just eapbc        Compile only selected design unit kinds
#                      (e=entity, a=arch, p=package, b=body, c=config)
#   -line <lineNum>    Specify a starting line number
#   -lint              Perform lint-style checks
#   -modelsimini <modelsim.ini>
#                      Specify path to the modelsim.ini file.
#   -no1164            Disable optimization for the std_logic_1164 package (same as "-noaccel std_logic_1164")
#   -noaccel <pname>   Disable optimization for the specified package
#   -nocasestaticerror Suppress case statement non-static choice warning
#   -nocheck           Disable run-time range and index checks
#   -nodebug[=ports][=pli][=ports+pli]
#                      Do not put symbolic debugging information into the library
#   -nodbgsym
#                      Do not generate symbols debugging database
#   -noDeferSubpgmCheck
#                      Perform compile-time range checking on constant index and
#                      slice expressions in subprograms at compile-time
#   -noindexcheck      Disable run-time index checks
#   -nologo            Disable startup banner
#   -noothersstaticerror Suppress array aggregate non-static OTHERS choice warning
#   -nopsl             Disable embedded PSL language parsing
#   -norangecheck      Disable run-time range checks
#   -novital           Disable all VITAL optimizations
#   -novitalcheck      Disable VITAL Level 1 compliance checking and optimizations
#   -novopt            Do not run the "vopt" compiler before simulation
#   -nowarn <number>   Disable specified category of warning messages; verror 1907 to see them
#   -noconstimmedassert  Do not show constant immediate assertions in GUI/UCDB/reports etc.
#   -O0                Disable optimizations
#   -O1                Enable some optimizations
#   -O4                Enable most optimizations (default)
#   -O5                Enable additional compiler optimizations
#   -pedanticerrors    Enforce strict language checks
#   -performdefaultbinding
#                      Enable default binding when it has been disabled with the
#                      RequireConfigForAllDefaultBinding modelsim.ini variable
#   -permissive        Relax some language error checks to warnings.
#   +protect[=<file>]  Enable use of `protect...`endprotect compiler directives
#   -pslext            Enable PSL LTL/Universal operators
#   -pslfile <file>    Compile and bind PSL vunits specified by <file>
#   -quiet             Disable 'Loading' messages
#   -rangecheck        Enable run-time range checks
#   -refresh           Refresh the library image from .dat file(s)
#   -s                 Do not load package std.standard
#   -skip eapbc        Compile all but selected design unit kinds
#                      (e=entity, a=arch, p=package, b=body, c=config)
#   -source            Print the source line with error messages
#   -mixedsvvh [b | l | r] [i]
#                      Facilitates using a VHDL package at the SV-VHDL mixed-language boundary.
#                         b - treat scalars/vectors in the package as bit
#                         l - treat scalars/vectors in the package as logic
#                         r - treat scalars/vectors in the package as reg
#                         i - ignore range specified with VHDL integer types
#   -vopt              Run the "vopt" compiler before simulation
#   -vmake             Collects complete list of command line args for use by vmake.
vcom -work /home/capplab10
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# Usage: vcom [options] files
# Options:
#   -help              Print this message
#   -time              Print the compilation wall clock time
#   -version           Print the version of the compiler
#   -32                Run in 32-bit mode
#   -64                Run in 64-bit mode
#   -work <path>       Specify library WORK
#   -error <msgNumber>[,<msgNumber>...]
#                      Report the listed messages as errors
#   -warning <msgNumber>[,<msgNumber>...]
#                      Report the listed messages as warnings
#   -note <msgNumber>[,<msgNumber>...]
#                      Report the listed message as notes
#   -suppress <msgNumber>[,<msgNumber>...]
#                      Suppress the listed messages
#   -87                Enable support for VHDL 1076-1987 only
#   -93                Enable support for VHDL 1076-1993
#   -ams               Enable AMS wreal extensions
#   -2002              Enable support for VHDL 1076-2002
#   -check_synthesis   Check for compliance to some synthesis rules
#   +acc[=<spec>][{+<entity>[(<architecture>)]}]
#                      Enable access to certain objects which might otherwise be
#                      optimized away.
#                      Objects are specified by a combination of design unit name
#                      and object-kind.  The +<entity>[(<architecture>)] and <spec>
#                      modifiers together specify a set of objects in the given
#                      design units.
#                      These modifiers help maximize simulation performance while
#                      retaining access to objects of interest.
#                      The effect of this option is limited only to those design units
#                      being compiled in the current vcom session.
# 
#                      By default, this option has an effect on all design units
#                      being compiled.
#                      +<entity>[(<architecture>)] can be used to target the extent
#                      of this option to only a specified design unit.
# 
#                      By default, +acc has effect on all kinds of design objects.
#                      <spec> is used to target more precisely certain kinds of objects.
#                      <spec> consists of one or more of the following letter codes:
#                         f (finite state machine recognition and debugging)
#                         v (variables, constants, and aliases)
#                      When no valid <spec> characters are specified, the entire set
#                      is enabled.
#   -bindAtCompile     Perform default binding at compile time
#   -bindAtLoad        Perform default binding when the design is loaded
#   -amsstd            Add VHDL-AMS declarations to package STANDARD
#   -noamsstd          Do not add VHDL-AMS declarations to package STANDARD
#   -nocoversub        Ignore VHDL subprograms for code coverage
#   -coversub          Include VHDL subprograms for code coverage
#   -coverrespecthandl  Inform code coverage optimizations to look for H and L signal values
#   -nocoverrespecthandl  Inform code coverage optimizations to ignore H and L signal values
#   +cover[=<spec>]
#                      <spec> is used to enable code coverage metrics for certain
#                      kinds of constructs.
#                      <spec> consists of one or more of the following letter codes:
#                         s (statement)
#                         b (branch)
#                         c (condition)
#                         e (expression)
#                         f (finite state machine)
#                         t (toggle)
#                         x (extended toggle)
#                      If no <spec> characters are given, sbceft is the default.
#   -coveropt <i>      Specify a digit for code coverage optimization level: 1 through 4.
#   -coverexcludedefault Automatically exclude case default clauses.
#   -nocoverfec        Disable Focused Expression Coverage analysis for conditions and expressions.
#   -nocoverudp        Disable UDP Coverage analysis for conditions and expressions.
#   -nocovershort      Disable short circuiting of expressions/condition when coverage is enabled.
#   -nocoverexcludedefault Don't automatically exclude case default clauses.
#   -constimmedassert  Show constant immediate assertions in GUI/UCDB/reports etc.
#   -togglecountlimit n Quit collecting toggle info after count n is reached.
#   -togglewidthlimit n Don't collect toggle data on reg's or arrays wider than n.
#   -extendedtogglemode [1|2|3]
#                      Change the level of support for extended toggles.
#                      The levels of support are:
#                      1 - 0L->1H & 1H->0L & any one 'Z' transition (to/from 'Z')
#                      2 - 0L->1H & 1H->0L & one transition to 'Z' & one transition from 'Z'
#                      3 - 0L->1H & 1H->0L & all 'Z' transitions
#   -maxudprows n      Max number of rows allowed in UDP tables for code coverage.
#   -maxfecrows n      Max number of input patterns allowed in FEC table for code coverage.
#   -coverreportcancelled Report coverage items that have been optimized away.
#   -debugVA           Print VITAL cell optimization information
#   -defercheck        Defer all compile-time range checking on constant index and
#                      slice expressions until run time
#   -deferSubpgmCheck  Defer compile-time range checking on constant index and
#                      slice expressions in subprograms until run time
#   -explicit          Resolve resolution conflicts in favor of explicit functions
#   -f <path>          Specify a file containing more command line arguments
#   -force_refresh     Force a refresh of the library image from .dat file(s)
#                      even if there are errors
#   -nofsmresettrans   Disable recognition of implicit asynchronous reset transitions for FSMs
#   -fsmresettrans     Enable recognition of implicit asynchronous reset transitions for FSMs
#   -nofsmsingle       Disable recognition FSMs having single bit current state variable
#   -fsmsingle         Enable recognition FSMs having single bit current state variable
#   -fsmimplicittrans  Enable recognition of implicit transitions in FSMs
#   -nofsmimplicittrans Disable recognition of implicit transitions in FSMs
#   -fsmmultitrans     Enable recognition of Multi-state transitions in FSMs
#   -fsmverbose [b|t|w]
#                      Provides information about FSMs recognized, including state reachability analysis.
#                      There are three detail levels that can be set with this option.
#                         b (displays only basic information)
#                         t (displays a transition table in addition to the basic information)
#                         w (displays any warning messages in addition to the basic information)
#                      If no character is specified, btw is the default.
#   -gen_xml <entity> <output>
#                      Output (into a file) the interface definition of the
#                      specified design unit in XML format
#   -ignoredefaultbinding
#                      Do not generate a default binding during compilation
#   -ignorevitalerrors Ignore VITAL compliance errors
#   -just eapbc        Compile only selected design unit kinds
#                      (e=entity, a=arch, p=package, b=body, c=config)
#   -line <lineNum>    Specify a starting line number
#   -lint              Perform lint-style checks
#   -modelsimini <modelsim.ini>
#                      Specify path to the modelsim.ini file.
#   -no1164            Disable optimization for the std_logic_1164 package (same as "-noaccel std_logic_1164")
#   -noaccel <pname>   Disable optimization for the specified package
#   -nocasestaticerror Suppress case statement non-static choice warning
#   -nocheck           Disable run-time range and index checks
#   -nodebug[=ports][=pli][=ports+pli]
#                      Do not put symbolic debugging information into the library
#   -nodbgsym
#                      Do not generate symbols debugging database
#   -noDeferSubpgmCheck
#                      Perform compile-time range checking on constant index and
#                      slice expressions in subprograms at compile-time
#   -noindexcheck      Disable run-time index checks
#   -nologo            Disable startup banner
#   -noothersstaticerror Suppress array aggregate non-static OTHERS choice warning
#   -nopsl             Disable embedded PSL language parsing
#   -norangecheck      Disable run-time range checks
#   -novital           Disable all VITAL optimizations
#   -novitalcheck      Disable VITAL Level 1 compliance checking and optimizations
#   -novopt            Do not run the "vopt" compiler before simulation
#   -nowarn <number>   Disable specified category of warning messages; verror 1907 to see them
#   -noconstimmedassert  Do not show constant immediate assertions in GUI/UCDB/reports etc.
#   -O0                Disable optimizations
#   -O1                Enable some optimizations
#   -O4                Enable most optimizations (default)
#   -O5                Enable additional compiler optimizations
#   -pedanticerrors    Enforce strict language checks
#   -performdefaultbinding
#                      Enable default binding when it has been disabled with the
#                      RequireConfigForAllDefaultBinding modelsim.ini variable
#   -permissive        Relax some language error checks to warnings.
#   +protect[=<file>]  Enable use of `protect...`endprotect compiler directives
#   -pslext            Enable PSL LTL/Universal operators
#   -pslfile <file>    Compile and bind PSL vunits specified by <file>
#   -quiet             Disable 'Loading' messages
#   -rangecheck        Enable run-time range checks
#   -refresh           Refresh the library image from .dat file(s)
#   -s                 Do not load package std.standard
#   -skip eapbc        Compile all but selected design unit kinds
#                      (e=entity, a=arch, p=package, b=body, c=config)
#   -source            Print the source line with error messages
#   -mixedsvvh [b | l | r] [i]
#                      Facilitates using a VHDL package at the SV-VHDL mixed-language boundary.
#                         b - treat scalars/vectors in the package as bit
#                         l - treat scalars/vectors in the package as logic
#                         r - treat scalars/vectors in the package as reg
#                         i - ignore range specified with VHDL integer types
#   -vopt              Run the "vopt" compiler before simulation
#   -vmake             Collects complete list of command line args for use by vmake.
# /Software/ModelSim/ModelSim_6.6d/modeltech/linux/vcom failed.
vcom -work /home/capplab10/Schreibtisch/bpti/sheet1/task2_3_vhd/21_and.vhd
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# Usage: vcom [options] files
# Options:
#   -help              Print this message
#   -time              Print the compilation wall clock time
#   -version           Print the version of the compiler
#   -32                Run in 32-bit mode
#   -64                Run in 64-bit mode
#   -work <path>       Specify library WORK
#   -error <msgNumber>[,<msgNumber>...]
#                      Report the listed messages as errors
#   -warning <msgNumber>[,<msgNumber>...]
#                      Report the listed messages as warnings
#   -note <msgNumber>[,<msgNumber>...]
#                      Report the listed message as notes
#   -suppress <msgNumber>[,<msgNumber>...]
#                      Suppress the listed messages
#   -87                Enable support for VHDL 1076-1987 only
#   -93                Enable support for VHDL 1076-1993
#   -ams               Enable AMS wreal extensions
#   -2002              Enable support for VHDL 1076-2002
#   -check_synthesis   Check for compliance to some synthesis rules
#   +acc[=<spec>][{+<entity>[(<architecture>)]}]
#                      Enable access to certain objects which might otherwise be
#                      optimized away.
#                      Objects are specified by a combination of design unit name
#                      and object-kind.  The +<entity>[(<architecture>)] and <spec>
#                      modifiers together specify a set of objects in the given
#                      design units.
#                      These modifiers help maximize simulation performance while
#                      retaining access to objects of interest.
#                      The effect of this option is limited only to those design units
#                      being compiled in the current vcom session.
# 
#                      By default, this option has an effect on all design units
#                      being compiled.
#                      +<entity>[(<architecture>)] can be used to target the extent
#                      of this option to only a specified design unit.
# 
#                      By default, +acc has effect on all kinds of design objects.
#                      <spec> is used to target more precisely certain kinds of objects.
#                      <spec> consists of one or more of the following letter codes:
#                         f (finite state machine recognition and debugging)
#                         v (variables, constants, and aliases)
#                      When no valid <spec> characters are specified, the entire set
#                      is enabled.
#   -bindAtCompile     Perform default binding at compile time
#   -bindAtLoad        Perform default binding when the design is loaded
#   -amsstd            Add VHDL-AMS declarations to package STANDARD
#   -noamsstd          Do not add VHDL-AMS declarations to package STANDARD
#   -nocoversub        Ignore VHDL subprograms for code coverage
#   -coversub          Include VHDL subprograms for code coverage
#   -coverrespecthandl  Inform code coverage optimizations to look for H and L signal values
#   -nocoverrespecthandl  Inform code coverage optimizations to ignore H and L signal values
#   +cover[=<spec>]
#                      <spec> is used to enable code coverage metrics for certain
#                      kinds of constructs.
#                      <spec> consists of one or more of the following letter codes:
#                         s (statement)
#                         b (branch)
#                         c (condition)
#                         e (expression)
#                         f (finite state machine)
#                         t (toggle)
#                         x (extended toggle)
#                      If no <spec> characters are given, sbceft is the default.
#   -coveropt <i>      Specify a digit for code coverage optimization level: 1 through 4.
#   -coverexcludedefault Automatically exclude case default clauses.
#   -nocoverfec        Disable Focused Expression Coverage analysis for conditions and expressions.
#   -nocoverudp        Disable UDP Coverage analysis for conditions and expressions.
#   -nocovershort      Disable short circuiting of expressions/condition when coverage is enabled.
#   -nocoverexcludedefault Don't automatically exclude case default clauses.
#   -constimmedassert  Show constant immediate assertions in GUI/UCDB/reports etc.
#   -togglecountlimit n Quit collecting toggle info after count n is reached.
#   -togglewidthlimit n Don't collect toggle data on reg's or arrays wider than n.
#   -extendedtogglemode [1|2|3]
#                      Change the level of support for extended toggles.
#                      The levels of support are:
#                      1 - 0L->1H & 1H->0L & any one 'Z' transition (to/from 'Z')
#                      2 - 0L->1H & 1H->0L & one transition to 'Z' & one transition from 'Z'
#                      3 - 0L->1H & 1H->0L & all 'Z' transitions
#   -maxudprows n      Max number of rows allowed in UDP tables for code coverage.
#   -maxfecrows n      Max number of input patterns allowed in FEC table for code coverage.
#   -coverreportcancelled Report coverage items that have been optimized away.
#   -debugVA           Print VITAL cell optimization information
#   -defercheck        Defer all compile-time range checking on constant index and
#                      slice expressions until run time
#   -deferSubpgmCheck  Defer compile-time range checking on constant index and
#                      slice expressions in subprograms until run time
#   -explicit          Resolve resolution conflicts in favor of explicit functions
#   -f <path>          Specify a file containing more command line arguments
#   -force_refresh     Force a refresh of the library image from .dat file(s)
#                      even if there are errors
#   -nofsmresettrans   Disable recognition of implicit asynchronous reset transitions for FSMs
#   -fsmresettrans     Enable recognition of implicit asynchronous reset transitions for FSMs
#   -nofsmsingle       Disable recognition FSMs having single bit current state variable
#   -fsmsingle         Enable recognition FSMs having single bit current state variable
#   -fsmimplicittrans  Enable recognition of implicit transitions in FSMs
#   -nofsmimplicittrans Disable recognition of implicit transitions in FSMs
#   -fsmmultitrans     Enable recognition of Multi-state transitions in FSMs
#   -fsmverbose [b|t|w]
#                      Provides information about FSMs recognized, including state reachability analysis.
#                      There are three detail levels that can be set with this option.
#                         b (displays only basic information)
#                         t (displays a transition table in addition to the basic information)
#                         w (displays any warning messages in addition to the basic information)
#                      If no character is specified, btw is the default.
#   -gen_xml <entity> <output>
#                      Output (into a file) the interface definition of the
#                      specified design unit in XML format
#   -ignoredefaultbinding
#                      Do not generate a default binding during compilation
#   -ignorevitalerrors Ignore VITAL compliance errors
#   -just eapbc        Compile only selected design unit kinds
#                      (e=entity, a=arch, p=package, b=body, c=config)
#   -line <lineNum>    Specify a starting line number
#   -lint              Perform lint-style checks
#   -modelsimini <modelsim.ini>
#                      Specify path to the modelsim.ini file.
#   -no1164            Disable optimization for the std_logic_1164 package (same as "-noaccel std_logic_1164")
#   -noaccel <pname>   Disable optimization for the specified package
#   -nocasestaticerror Suppress case statement non-static choice warning
#   -nocheck           Disable run-time range and index checks
#   -nodebug[=ports][=pli][=ports+pli]
#                      Do not put symbolic debugging information into the library
#   -nodbgsym
#                      Do not generate symbols debugging database
#   -noDeferSubpgmCheck
#                      Perform compile-time range checking on constant index and
#                      slice expressions in subprograms at compile-time
#   -noindexcheck      Disable run-time index checks
#   -nologo            Disable startup banner
#   -noothersstaticerror Suppress array aggregate non-static OTHERS choice warning
#   -nopsl             Disable embedded PSL language parsing
#   -norangecheck      Disable run-time range checks
#   -novital           Disable all VITAL optimizations
#   -novitalcheck      Disable VITAL Level 1 compliance checking and optimizations
#   -novopt            Do not run the "vopt" compiler before simulation
#   -nowarn <number>   Disable specified category of warning messages; verror 1907 to see them
#   -noconstimmedassert  Do not show constant immediate assertions in GUI/UCDB/reports etc.
#   -O0                Disable optimizations
#   -O1                Enable some optimizations
#   -O4                Enable most optimizations (default)
#   -O5                Enable additional compiler optimizations
#   -pedanticerrors    Enforce strict language checks
#   -performdefaultbinding
#                      Enable default binding when it has been disabled with the
#                      RequireConfigForAllDefaultBinding modelsim.ini variable
#   -permissive        Relax some language error checks to warnings.
#   +protect[=<file>]  Enable use of `protect...`endprotect compiler directives
#   -pslext            Enable PSL LTL/Universal operators
#   -pslfile <file>    Compile and bind PSL vunits specified by <file>
#   -quiet             Disable 'Loading' messages
#   -rangecheck        Enable run-time range checks
#   -refresh           Refresh the library image from .dat file(s)
#   -s                 Do not load package std.standard
#   -skip eapbc        Compile all but selected design unit kinds
#                      (e=entity, a=arch, p=package, b=body, c=config)
#   -source            Print the source line with error messages
#   -mixedsvvh [b | l | r] [i]
#                      Facilitates using a VHDL package at the SV-VHDL mixed-language boundary.
#                         b - treat scalars/vectors in the package as bit
#                         l - treat scalars/vectors in the package as logic
#                         r - treat scalars/vectors in the package as reg
#                         i - ignore range specified with VHDL integer types
#   -vopt              Run the "vopt" compiler before simulation
#   -vmake             Collects complete list of command line args for use by vmake.
# /Software/ModelSim/ModelSim_6.6d/modeltech/linux/vcom failed.
vcom *
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# -- Loading package standard
# ** Error: bpti.cr.mti(1): near "/": syntax error
# ** Error: bpti.mpf(1): VHDL Compiler exiting
# /Software/ModelSim/ModelSim_6.6d/modeltech/linux/vcom failed.
vcom 21_or
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# ** Error: (vcom-7) Failed to open design unit file "21_or" in read mode.
# No such file or directory. (errno = ENOENT)
# /Software/ModelSim/ModelSim_6.6d/modeltech/linux/vcom failed.
# Compile of 322_nand_testbench.vhd was successful.
vcom work/and_ent
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# -- Loading package standard
# ** Error: work/and_ent(1): near "EOF": syntax error
# /Software/ModelSim/ModelSim_6.6d/modeltech/linux/vcom failed.
vcom sheet1/task2_3_vhd/21_and.vhd
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# -- Loading package standard
# -- Compiling entity and_ent
# -- Compiling architecture behaviour_and of and_ent
vcom *.vhd
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# ** Error: (vcom-7) Failed to open design unit file "*.vhd" in read mode.
# No such file or directory. (errno = ENOENT)
# /Software/ModelSim/ModelSim_6.6d/modeltech/linux/vcom failed.
vcom -help
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# Usage: vcom [options] files
# Options:
#   -help              Print this message
#   -time              Print the compilation wall clock time
#   -version           Print the version of the compiler
#   -32                Run in 32-bit mode
#   -64                Run in 64-bit mode
#   -work <path>       Specify library WORK
#   -error <msgNumber>[,<msgNumber>...]
#                      Report the listed messages as errors
#   -warning <msgNumber>[,<msgNumber>...]
#                      Report the listed messages as warnings
#   -note <msgNumber>[,<msgNumber>...]
#                      Report the listed message as notes
#   -suppress <msgNumber>[,<msgNumber>...]
#                      Suppress the listed messages
#   -87                Enable support for VHDL 1076-1987 only
#   -93                Enable support for VHDL 1076-1993
#   -ams               Enable AMS wreal extensions
#   -2002              Enable support for VHDL 1076-2002
#   -check_synthesis   Check for compliance to some synthesis rules
#   +acc[=<spec>][{+<entity>[(<architecture>)]}]
#                      Enable access to certain objects which might otherwise be
#                      optimized away.
#                      Objects are specified by a combination of design unit name
#                      and object-kind.  The +<entity>[(<architecture>)] and <spec>
#                      modifiers together specify a set of objects in the given
#                      design units.
#                      These modifiers help maximize simulation performance while
#                      retaining access to objects of interest.
#                      The effect of this option is limited only to those design units
#                      being compiled in the current vcom session.
# 
#                      By default, this option has an effect on all design units
#                      being compiled.
#                      +<entity>[(<architecture>)] can be used to target the extent
#                      of this option to only a specified design unit.
# 
#                      By default, +acc has effect on all kinds of design objects.
#                      <spec> is used to target more precisely certain kinds of objects.
#                      <spec> consists of one or more of the following letter codes:
#                         f (finite state machine recognition and debugging)
#                         v (variables, constants, and aliases)
#                      When no valid <spec> characters are specified, the entire set
#                      is enabled.
#   -bindAtCompile     Perform default binding at compile time
#   -bindAtLoad        Perform default binding when the design is loaded
#   -amsstd            Add VHDL-AMS declarations to package STANDARD
#   -noamsstd          Do not add VHDL-AMS declarations to package STANDARD
#   -nocoversub        Ignore VHDL subprograms for code coverage
#   -coversub          Include VHDL subprograms for code coverage
#   -coverrespecthandl  Inform code coverage optimizations to look for H and L signal values
#   -nocoverrespecthandl  Inform code coverage optimizations to ignore H and L signal values
#   +cover[=<spec>]
#                      <spec> is used to enable code coverage metrics for certain
#                      kinds of constructs.
#                      <spec> consists of one or more of the following letter codes:
#                         s (statement)
#                         b (branch)
#                         c (condition)
#                         e (expression)
#                         f (finite state machine)
#                         t (toggle)
#                         x (extended toggle)
#                      If no <spec> characters are given, sbceft is the default.
#   -coveropt <i>      Specify a digit for code coverage optimization level: 1 through 4.
#   -coverexcludedefault Automatically exclude case default clauses.
#   -nocoverfec        Disable Focused Expression Coverage analysis for conditions and expressions.
#   -nocoverudp        Disable UDP Coverage analysis for conditions and expressions.
#   -nocovershort      Disable short circuiting of expressions/condition when coverage is enabled.
#   -nocoverexcludedefault Don't automatically exclude case default clauses.
#   -constimmedassert  Show constant immediate assertions in GUI/UCDB/reports etc.
#   -togglecountlimit n Quit collecting toggle info after count n is reached.
#   -togglewidthlimit n Don't collect toggle data on reg's or arrays wider than n.
#   -extendedtogglemode [1|2|3]
#                      Change the level of support for extended toggles.
#                      The levels of support are:
#                      1 - 0L->1H & 1H->0L & any one 'Z' transition (to/from 'Z')
#                      2 - 0L->1H & 1H->0L & one transition to 'Z' & one transition from 'Z'
#                      3 - 0L->1H & 1H->0L & all 'Z' transitions
#   -maxudprows n      Max number of rows allowed in UDP tables for code coverage.
#   -maxfecrows n      Max number of input patterns allowed in FEC table for code coverage.
#   -coverreportcancelled Report coverage items that have been optimized away.
#   -debugVA           Print VITAL cell optimization information
#   -defercheck        Defer all compile-time range checking on constant index and
#                      slice expressions until run time
#   -deferSubpgmCheck  Defer compile-time range checking on constant index and
#                      slice expressions in subprograms until run time
#   -explicit          Resolve resolution conflicts in favor of explicit functions
#   -f <path>          Specify a file containing more command line arguments
#   -force_refresh     Force a refresh of the library image from .dat file(s)
#                      even if there are errors
#   -nofsmresettrans   Disable recognition of implicit asynchronous reset transitions for FSMs
#   -fsmresettrans     Enable recognition of implicit asynchronous reset transitions for FSMs
#   -nofsmsingle       Disable recognition FSMs having single bit current state variable
#   -fsmsingle         Enable recognition FSMs having single bit current state variable
#   -fsmimplicittrans  Enable recognition of implicit transitions in FSMs
#   -nofsmimplicittrans Disable recognition of implicit transitions in FSMs
#   -fsmmultitrans     Enable recognition of Multi-state transitions in FSMs
#   -fsmverbose [b|t|w]
#                      Provides information about FSMs recognized, including state reachability analysis.
#                      There are three detail levels that can be set with this option.
#                         b (displays only basic information)
#                         t (displays a transition table in addition to the basic information)
#                         w (displays any warning messages in addition to the basic information)
#                      If no character is specified, btw is the default.
#   -gen_xml <entity> <output>
#                      Output (into a file) the interface definition of the
#                      specified design unit in XML format
#   -ignoredefaultbinding
#                      Do not generate a default binding during compilation
#   -ignorevitalerrors Ignore VITAL compliance errors
#   -just eapbc        Compile only selected design unit kinds
#                      (e=entity, a=arch, p=package, b=body, c=config)
#   -line <lineNum>    Specify a starting line number
#   -lint              Perform lint-style checks
#   -modelsimini <modelsim.ini>
#                      Specify path to the modelsim.ini file.
#   -no1164            Disable optimization for the std_logic_1164 package (same as "-noaccel std_logic_1164")
#   -noaccel <pname>   Disable optimization for the specified package
#   -nocasestaticerror Suppress case statement non-static choice warning
#   -nocheck           Disable run-time range and index checks
#   -nodebug[=ports][=pli][=ports+pli]
#                      Do not put symbolic debugging information into the library
#   -nodbgsym
#                      Do not generate symbols debugging database
#   -noDeferSubpgmCheck
#                      Perform compile-time range checking on constant index and
#                      slice expressions in subprograms at compile-time
#   -noindexcheck      Disable run-time index checks
#   -nologo            Disable startup banner
#   -noothersstaticerror Suppress array aggregate non-static OTHERS choice warning
#   -nopsl             Disable embedded PSL language parsing
#   -norangecheck      Disable run-time range checks
#   -novital           Disable all VITAL optimizations
#   -novitalcheck      Disable VITAL Level 1 compliance checking and optimizations
#   -novopt            Do not run the "vopt" compiler before simulation
#   -nowarn <number>   Disable specified category of warning messages; verror 1907 to see them
#   -noconstimmedassert  Do not show constant immediate assertions in GUI/UCDB/reports etc.
#   -O0                Disable optimizations
#   -O1                Enable some optimizations
#   -O4                Enable most optimizations (default)
#   -O5                Enable additional compiler optimizations
#   -pedanticerrors    Enforce strict language checks
#   -performdefaultbinding
#                      Enable default binding when it has been disabled with the
#                      RequireConfigForAllDefaultBinding modelsim.ini variable
#   -permissive        Relax some language error checks to warnings.
#   +protect[=<file>]  Enable use of `protect...`endprotect compiler directives
#   -pslext            Enable PSL LTL/Universal operators
#   -pslfile <file>    Compile and bind PSL vunits specified by <file>
#   -quiet             Disable 'Loading' messages
#   -rangecheck        Enable run-time range checks
#   -refresh           Refresh the library image from .dat file(s)
#   -s                 Do not load package std.standard
#   -skip eapbc        Compile all but selected design unit kinds
#                      (e=entity, a=arch, p=package, b=body, c=config)
#   -source            Print the source line with error messages
#   -mixedsvvh [b | l | r] [i]
#                      Facilitates using a VHDL package at the SV-VHDL mixed-language boundary.
#                         b - treat scalars/vectors in the package as bit
#                         l - treat scalars/vectors in the package as logic
#                         r - treat scalars/vectors in the package as reg
#                         i - ignore range specified with VHDL integer types
#   -vopt              Run the "vopt" compiler before simulation
#   -vmake             Collects complete list of command line args for use by vmake.
vcom
vcom -reportprogress 300 -work work /home/capplab10/Schreibtisch/bpti/sheet1/task2_3_vhd/24_counter.vhd
vcom -reportprogress 300 -work work /home/capplab10/Schreibtisch/bpti/sheet1/task2_3_vhd/24_counter.vhd
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# ** Warning: (vcom-6) -- Waiting for lock by "capplab10@i80labpc01". Lockfile is "/home/capplab10/Schreibtisch/bpti/work/_lock".
# -- Loading package standard
# -- Compiling entity counter_ent
# -- Compiling architecture behaviour_counter of counter_ent
# -- Loading package standard
# -- Compiling entity counter_ent
# -- Compiling architecture behaviour_counter of counter_ent
vcom -reportprogress 300 -work work /home/capplab10/Schreibtisch/bpti/*.vhd
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# ** Error: (vcom-7) Failed to open design unit file "/home/capplab10/Schreibtisch/bpti/*.vhd" in read mode.
# No such file or directory. (errno = ENOENT)
# /Software/ModelSim/ModelSim_6.6d/modeltech/linux/vcom failed.
vcom -reportprogress 300 -work work /home/capplab10/Schreibtisch/bpti
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# -- Loading package standard
# ** Error: /home/capplab10/Schreibtisch/bpti(1): near "EOF": syntax error
# /Software/ModelSim/ModelSim_6.6d/modeltech/linux/vcom failed.
vcom -reportprogress 300 -work work /home/capplab10/Schreibtisch/bpti
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# -- Loading package standard
# ** Error: /home/capplab10/Schreibtisch/bpti(1): near "EOF": syntax error
# /Software/ModelSim/ModelSim_6.6d/modeltech/linux/vcom failed.
vcom -reportprogress 300 -work work /home/capplab10/Schreibtisch/bpti/sheet1/task2_3_vhd
# Model Technology ModelSim SE vcom 6.6d Compiler 2010.11 Nov  1 2010
# -- Loading package standard
# ** Error: /home/capplab10/Schreibtisch/bpti/sheet1/task2_3_vhd(1): near "EOF": syntax error
# /Software/ModelSim/ModelSim_6.6d/modeltech/linux/vcom failed.
# Compile of 21_and.vhd was successful.
# Compile of 21_not.vhd was successful.
# Compile of 21_or.vhd was successful.
# Compile of 22_nand_behav.vhd was successful.
# Compile of 22_nand_struct.vhd was successful.
# Compile of 22_nor_behav.vhd was successful.
# Compile of 22_nor_struct.vhd was successful.
# Compile of 23_impuls.vhd was successful.
# Compile of 24_counter.vhd was successful.
# Compile of 322_nand_testbench.vhd was successful.
# 10 compiles, 0 failed with no errors. 
# reading /Software/ModelSim/ModelSim_6.6d/modeltech/modelsim.ini
do sheet1/scripts/load.do
# Loading project bpti
